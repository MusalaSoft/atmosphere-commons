apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.6
targetCompatibility = 1.6
version = '0.1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Atmosphere Commons',
                   'Implementation-Version': version
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'log4j:log4j:1.2.17'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.musala.atmosphere:framework-api19:0.+'
    compile 'com.google.code.gson:gson:2.8.0'

    testCompile 'junit:junit:4.12'
}

publishing {
    publications {
        atmosphereCommons(MavenPublication) {
            groupId 'com.musala.atmosphere'
            artifactId 'atmosphere-commons'
            version version

            from components.java

            // Credit: http://stackoverflow.com/a/32353697/3370842
            pom.withXml {
                // Generate map of resolved versions
                Map resolvedVersionMap = [:]
                Set<ResolvedArtifact> resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.addAll(configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
                resolvedArtifacts.each {
                    ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
                    resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
                }

                // Update dependencies with resolved versions
                asNode().dependencies.first().each {
                    def groupId = it.get("groupId").first().value().first()
                    def artifactId = it.get("artifactId").first().value().first()
                    it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

tasks.withType(JavaCompile) {
    options.bootClasspath = bootClasspath
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}